{"version":3,"sources":["Projects.js","About.js","Profile.js","App.js","serviceWorker.js","index.js"],"names":["Projects","class","Container","Row","Col","href","width","height","src","frameborder","allow","allowfullscreen","React","Component","About","Profile","App","className","Jumbotron","id","Navbar","bg","variant","Nav","defaultActiveKey","Item","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAmCeA,E,uKA5BX,OACE,yBAAKC,MAAM,QACT,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKH,MAAM,aACT,qCACA,qHACA,2BAAG,uBAAGI,KAAK,yCAAR,0CACH,4BAAQC,MAAM,QAAQC,OAAO,QAAQC,IAAI,4CAA4CC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,MAGxM,kBAACP,EAAA,EAAD,KACE,yBAAKH,MAAM,aACT,4CACA,gGACA,2BAAG,uBAAGI,KAAK,+CAAR,gDACH,4BAAQC,MAAM,QAAQC,OAAO,QAAQC,IAAI,4CAA4CC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,a,GAnB7LC,IAAMC,WCSdC,E,uKATX,OACE,qC,GAJcF,IAAMC,WCuBXE,E,uKAjBX,OACE,kBAACb,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,gBAEF,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,qB,GAZYQ,IAAMC,W,eCoDbG,E,uKAvCX,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,wBAAIC,GAAG,WAAP,cACA,uBAAGA,GAAG,UAAN,2CAGA,kBAACC,EAAA,EAAD,CAAQD,GAAG,SAASE,GAAG,OAAOC,QAAQ,QACpC,kBAACC,EAAA,EAAD,CAAKC,iBAAiB,SACpB,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEF,kBAACH,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,aAAT,aAEF,kBAACH,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,eAKR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,c,GAhCIf,IAAMC,WCJJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29215c55.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/container';\nimport Row from 'react-bootstrap/row';\nimport Col from 'react-bootstrap/col';\n\nclass Projects extends React.Component {\n  render() {\n    return (\n      <div class=\"desc\">\n        <Container>\n          <Row>\n            <Col>\n              <div class=\"demo-item\">\n                <h3>Savor</h3>\n                <p>Chrome extension to save recipes from websites into a pre-formatted downloadable file.</p>\n                <p><a href=\"https://github.com/deepictorial/savor\">https://github.com/deepictorial/savor</a></p>\n                <iframe width=\"275px\" height=\"170px\" src=\"https://www.youtube.com/embed/x1rrirFsmgc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n              </div>\n            </Col>\n            <Col>\n              <div class=\"demo-item\">\n                <h3>Count Me In!</h3>\n                <p>Desktop & Mobile-web app to create personalized event countdowns.</p>\n                <p><a href=\"https://github.com/deepictorial/count-me-in\">https://github.com/deepictorial/count-me-in</a></p>\n                <iframe width=\"275px\" height=\"170px\" src=\"https://www.youtube.com/embed/B4VIgK9ylAk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\n\nexport default Projects;\n","import React from 'react';\n\nclass About extends React.Component {\n\n  render() {\n    return (\n      <canvas>\n\n      </canvas>\n    );\n  }\n}\n\n\nexport default About;\n","import React from 'react';\nimport Container from 'react-bootstrap/container';\nimport Row from 'react-bootstrap/row';\nimport Col from 'react-bootstrap/col';\n\nclass Profile extends React.Component {\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>Profile of 2</Col>\n          <Col>2 of 2</Col>\n        </Row>\n        <Row>\n          <Col>1 of 3</Col>\n          <Col>2 of 3</Col>\n          <Col>3 of 3</Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\n\nexport default Profile;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/jumbotron';\nimport Nav from 'react-bootstrap/nav';\nimport Navbar from 'react-bootstrap/navbar';\nimport Projects from './Projects.js';\nimport About from './About.js';\nimport Profile from './Profile.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Jumbotron>\n            <h1 id=\"heading\">Oh, hello!</h1>\n            <p id=\"banner\">\n              Looks like you've landed here, welcome!\n            </p>\n            <Navbar id=\"navbar\" bg=\"dark\" variant=\"dark\">\n              <Nav defaultActiveKey=\"/home\">\n                <Nav.Item>\n                  <Link to=\"/about\">About</Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Link to=\"/projects\">Projects</Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Link to=\"/profile\">Profile</Link>\n                </Nav.Item>\n              </Nav>\n            </Navbar>\n          </Jumbotron>\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/projects\">\n              <Projects />\n            </Route>\n            <Route path=\"/profile\">\n              <Profile />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}